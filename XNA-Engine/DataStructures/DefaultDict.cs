using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Engine.DataStructures
{
    /// <summary>
    /// Uses TryGetValue for index-notation lookup
    /// </summary>
    /// <typeparam name="TKey"></typeparam>
    /// <typeparam name="TValue"></typeparam>
    public class DefaultDict<TKey, TValue> : Dictionary<TKey, TValue>
    {
        Func<TValue> defaultValueFunc;

        /// <summary>
        /// Construct a DefaultDict whose fallback value is the public parameterless constructor of TValue
        /// </summary>
        public DefaultDict() : base() { }

        /// <summary>
        /// Construct a DefaultDict whose fallback value is generated by the given function
        /// </summary>
        public DefaultDict(Func<TValue> defaultValueFunc = null)
            : base()
        {
            this.defaultValueFunc = defaultValueFunc;
        }

        /// <summary>
        /// Construct a DefaultDict from another IDict, with a fallback value function that is the
        /// public parameterless constructor of TVale
        /// </summary>
        public DefaultDict(IDictionary<TKey, TValue> other)
            : base(other)
        {
            defaultValueFunc = null;
        }

        /// <summary>
        /// Copy Constructor - copies the other DefaultDict's defaultValueFunc
        /// </summary>
        /// <param name="other"></param>
        public DefaultDict(DefaultDict<TKey, TValue> other)
            : base(other)
        {
            defaultValueFunc = other.defaultValueFunc;
        }

        /// <summary>
        /// Gets or sets the value associated with the specified key.
        /// </summary>
        /// <param name="key">The key of the value to get or set.</param>
        /// <returns></returns>
        public new TValue this[TKey key]
        {
            get
            {
                TValue value;
                base.TryGetValue(key, out value);
                if (value == null)
                {
                    if (defaultValueFunc == null)
                        value = default(TValue);
                    else
                        value = defaultValueFunc();
                    base[key] = value;
                }
                return value;
            }
            set
            {
                base[key] = value;
            }
        }
    }
}
